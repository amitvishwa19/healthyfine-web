generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

enum ROLE {
  PATIENT
  DOCTOR
  HOSPITAL
  AMBULANCE
  PHARMACY
  INSURANCE
  RECEPTIONIST
  ADMIN
}

enum PRIORITY {
  LOW
  MEDIUM
  HIGH
}

enum GENDER {
  MALE
  FEMALE
  OTHER
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD
}

model User {
  id            String  @id @default(cuid())
  name          String?
  displayName   String?
  firstName     String?
  lastName      String?
  username      String? @unique
  email         String  @unique
  phone         String?
  avatar        String?
  emailVerified Boolean @default(false)
  status        Boolean @default(false)
  avaliable     Boolean @default(false)
  password      String?

  uid      String?
  provider String?

  profile       Profile?
  profileStatus Boolean  @default(false)
  online        Boolean  @default(true)

  healthMetricItemId String?

  role       ROLE             @default(PATIENT)
  roles      Role[]
  Setting    Setting[]
  preference UserPreference[]

  members      Member[]
  servers      Server[]
  channels     Channel[]
  locations    Location[]
  documents    Document[]
  Folder       Folder[]
  HealthMetric HealthMetric[]
  Address      Address[]
  FcmTokens    FcmToken[]

  deviceToken  String?
  refreshToken String?
  accessToken  String?

  forgotPasswordToken       String?
  forgotPasswordTokenExpiry DateTime?

  verifyToken       String?
  verifyTokenExpiry DateTime?

  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  Content             Content[]
  Card                Card[]
  Task                Task[]
  patientAppointments Appointment[] @relation(name: "patient")
  doctorAppointment   Appointment[] @relation(name: "doctor")

  careuser     Care[] @relation(name: "patient")
  careprovider Care[] @relation(name: "care")

  //careteams           Careteam[]
  allergies Allergy[]
  SYmptom   Symptom[]
  Records   Record[]

  payer  Transaction[] @relation(name: "payer")
  payee  Transaction[] @relation(name: "payee")
  Credit Credit[]

  @@index([email])
}

// model Careteam {
//   id String @id @default(cuid())

//   User       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId     String
//   careteamId String

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([userId])
// }

model Care {
  id String @id @default(cuid())

  patient   User   @relation("patient", fields: [patientId], references: [id], onDelete: Cascade)
  patientId String

  care   User   @relation("care", fields: [careId], references: [id], onDelete: Cascade)
  careId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([patientId])
  @@index([careId])
}

model FcmToken {
  id     String @id @default(cuid())
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  type  String? @db.Text
  token String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Location {
  id     String @id @default(cuid())
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  latitude  Float
  longitude Float

  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Profile {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  type String? @db.Text

  firstname  String?   @db.Text
  lastname   String?   @db.Text
  dob        DateTime?
  gender     String?   @db.Text
  weight     Float?
  height     Float?
  waist      Float?
  contact    String?   @db.Text
  bloodGroup String?   @db.Text
  emrcontact String?   @db.Text
  location   Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Address {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  address Json?
  coords  Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Content {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  title       String
  slug        String
  description String?
  status      Boolean @default(true)

  contentFields ContentField[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model ContentField {
  id String @id @default(cuid())

  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId String

  type        String
  title       String
  slug        String?
  description String?
  display     Boolean @default(true)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ContentItems ContentItems[]

  @@index([contentId])
}

model ContentItems {
  id String @id @default(cuid())

  field   ContentField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId String

  value String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([fieldId])
}

model ContactForm {
  id String @id @default(cuid())

  name    String?
  company String?
  email   String?
  phone   String?
  message String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum APPOINTMENTSTATUS {
  COMPLETED
  PENDING
  CANCELLED
}

model Appointment {
  id String @id @default(cuid())

  patient   User   @relation("patient", fields: [patientId], references: [id], onDelete: Cascade)
  patientId String

  doctor   User   @relation("doctor", fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId String

  uid    String?
  date   DateTime
  slot   String
  time   String?
  note   String?
  type   String?
  status String   @default("PENDING")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([patientId])
  @@index([doctorId])
}

model HealthRecord {
  id String @id @default(cuid())

  order       Int?
  title       String? @db.Text
  slug        String? @db.Text
  description String?
  icon        String? @db.Text
  action      String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HealthMetricItem {
  id String @id @default(cuid())

  order      Int?
  title      String? @db.Text
  slug       String? @db.Text
  datafields Int     @default(1)
  suffix     String? @db.Text
  creator    String  @default("N/A")
  data       String  @default("-")
  date       String  @default("-")
  lowerRange Int?
  upperRange Int?

  HealthMetric HealthMetric[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HealthMetric {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  healthMetricItem   HealthMetricItem @relation(fields: [healthMetricItemId], references: [id], onDelete: Cascade)
  healthMetricItemId String

  title     String? @db.Text
  slug      String? @db.Text
  suffix    String? @db.Text
  entryType String? @default("Self-Entered")
  feilds    Int?    @default(1) @db.Integer
  type      String? @default("number") @db.Text

  key1 String?  @db.Text
  val1 String?  @db.Text
  key2 String?  @db.Text
  val2 String?  @db.Text
  key3 String?  @db.Text
  val3 String?  @db.Text
  key4 String?  @db.Text
  val4 String?  @db.Text
  date DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([healthMetricItemId])
}

model Record {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  type         String  @db.Text
  title        String  @db.Text
  description  String? @db.Text
  prescription Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Allergy {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  title       String? @db.Text
  description String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Symptom {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  title       String? @db.Text
  description String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Server {
  id         String  @id @default(cuid())
  name       String
  imageUrl   String?
  inviteCode String  @unique
  selected   Boolean @default(false)

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  members  Member[]
  channels Channel[]
  boards   Board[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Task      Task[]
  Card      Card[]
  settings  Setting[]

  @@index([userId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(cuid())
  name String
  type ChannelType @default(TEXT)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([serverId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(cuid())
  role MemberRole @default(GUEST)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages       Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([serverId])
}

model Message {
  id      String @id @default(cuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted    Boolean @default(false)
  sent       Boolean @default(false)
  deleivered Boolean @default(false)
  read       Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(cuid())

  memberOneId String
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id      String  @id @default(cuid())
  content String  @db.Text
  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}

model UserPreference {
  id     String @id @default(cuid())
  userId String
  user   Board  @relation(fields: [userId], references: [id], onDelete: Cascade)

  emailUpdates  Boolean @default(true)
  notifications Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]

  @@index([userId])
}

model Role {
  id          String  @id @default(cuid())
  title       String  @unique
  description String?
  status      Boolean @default(true)

  users       User[]
  permissions Permission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id          String  @id @default(cuid())
  title       String  @unique
  description String
  status      Boolean @default(false)
  roles       Role[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          String   @id @default(cuid())
  title       String
  order       Int
  description String?  @db.Text
  color       String?  @db.Text
  priority    PRIORITY @default(LOW)
  status      Boolean  @default(true)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  assigneeId String
  assignee   User   @relation(fields: [assigneeId], references: [id], onDelete: Cascade)

  dueDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Board     Board?    @relation(fields: [boardId], references: [id])
  boardId   String?
  List      List?     @relation(fields: [listId], references: [id])
  listId    String?

  @@index([serverId])
}

model Board {
  id             String  @id @default(cuid())
  title          String
  description    String?
  avatar         String?
  showBackground Boolean @default(false)
  status         Boolean @default(true)

  lists List[]

  server   Server? @relation(fields: [serverId], references: [id])
  serverId String?

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  UserPreference UserPreference[]
  Card           Card[]
  Task           Task[]

  @@index([serverId])
}

model List {
  id    String @id @default(cuid())
  title String
  order Int

  boardId String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  cards Card[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Task      Task[]

  @@index([boardId])
}

model Card {
  id          String   @id @default(cuid())
  title       String
  order       Int
  description String?  @db.Text
  color       String?  @db.Text
  priority    PRIORITY @default(LOW)
  status      Boolean  @default(true)

  serverId String
  server   Server @relation(fields: [serverId], references: [id])

  listId String
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)

  boardId String?
  board   Board?  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  assigneeId String
  assignee   User   @relation(fields: [assigneeId], references: [id], onDelete: Cascade)

  dueDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([listId])
}

model AuditLog {
  id          String  @id @default(uuid())
  orgId       String?
  action      String?
  entityId    String?
  entityType  String?
  entityTitle String?
  userId      String?
  userImage   String? @db.Text
  userName    String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrgLimit {
  id    String @id @default(uuid())
  orgId String @unique
  count Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrgSubscription {
  id    String @id @default(uuid())
  orgId String @unique

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model Setting {
  id          String  @id @default(cuid())
  key         String  @db.Text
  value       String?
  description String?

  server   Server? @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Folder {
  id String @id @default(cuid())

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  FIle Document[]

  name   String  @db.Text
  status Boolean @default(true)

  @@index([userId])
}

model Document {
  id String @id @default(cuid())

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  folder   Folder? @relation(fields: [folderId], references: [id])
  folderId String?

  name         String  @db.Text
  description  String?
  url          String
  type         String
  documentType String?
  size         String
  comment      String? @db.Text
  status       Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

enum WORKFLOWSTATUS {
  DRAFT
  PUBLISHED
}

enum TASKTYPE {
  LAUNCHBROWSER
}

enum TASKPARAMTYPES {
  STRING
}

model Workflow {
  id String @id @default(cuid())

  userId      String
  name        String
  description String?

  defination    String?
  executionPlan String?
  creditCost    Int            @default(0)
  cron          String?
  status        WORKFLOWSTATUS @default(DRAFT)

  lastRunAt     DateTime?
  lastRunId     String?
  lastRunStatus String?
  nextRunAt     DateTime?

  executions WorkflowExecution[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, userId])
}

model WorkflowExecution {
  id String @id @default(cuid())

  workflowId     String
  userId         String
  trigger        String
  status         String
  startedAt      DateTime?
  completedAt    DateTime?
  creditConsumed Int       @default(0)
  definition     String    @default("{}")

  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  phases WorkflowExecutionPhase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkflowExecutionPhase {
  id String @id @default(cuid())

  userId String
  status String
  number Int
  node   String
  name   String

  startedAt   DateTime?
  completedAt DateTime?

  inputs  String?
  outputs String?

  creditConsumed Int?

  workflowExceutionId String
  execution           WorkflowExecution @relation(fields: [workflowExceutionId], references: [id], onDelete: Cascade)

  workflowExecutionLogs WorkflowExecutionLogs[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkflowExecutionLogs {
  id       String @id @default(cuid())
  logLevel String
  message  String

  workflowExecutionPhaseId String
  workflowExecutionPhase   WorkflowExecutionPhase @relation(fields: [workflowExecutionPhaseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserBalance {
  userId  String @id
  credits Int    @default(0)
}

model Transaction {
  id String @id @default(cuid())

  payer   User   @relation("payer", fields: [payerId], references: [id], onDelete: Cascade)
  payerId String

  payee   User   @relation("payee", fields: [payeeId], references: [id], onDelete: Cascade)
  payeeId String

  amount      Float
  description String?
  status      String?
  orderId     String?
  paymentId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([payerId])
  @@index([payeeId])
}

model Credit {
  id String @id @default(cuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  value Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Credential {
  id String @id @default(cuid())

  userId String
  name   String
  value  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, userId])
}
